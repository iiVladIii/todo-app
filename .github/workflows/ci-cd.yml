name: CI/CD Pipeline

on:
    push:
        branches: [main, master]
    pull_request:
        branches: [main, master]
    workflow_dispatch:

jobs:
    test-backend:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2

            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: '18'

            - name: Install dependencies for backend
              working-directory: ./backend
              run: npm install

            - name: Run tests for backend
              working-directory: ./backend
              run: npm test

    test-frontend:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2

            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: '17'

            - name: Install dependencies for frontend
              working-directory: ./frontend
              run: npm install

            - name: Run tests for frontend
              working-directory: ./frontend
              run: npm run test

    sonarqube-analysis:
        runs-on: ubuntu-latest
        needs: [test-backend, test-frontend]
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0 # Shallow clones should be disabled for better relevancy of analysis

            - name: SonarQube Scan
              uses: sonarsource/sonarqube-scan-action@master
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
              with:
                  args: >
                      -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}
                      -Dsonar.projectName=${{ github.repository_owner }}_${{ github.event.repository.name }}
                      -Dsonar.javascript.lcov.reportPaths=./frontend/coverage/lcov.info,./backend/coverage/lcov.info
                      -Dsonar.coverage.exclusions=**/node_modules/**,**/test/**,**/tests/**
                      -Dsonar.qualitygate.wait=true
                      -Dsonar.qualitygate.timeout=300

            - name: SonarQube Quality Gate check
              uses: sonarsource/sonarqube-quality-gate-action@master
              timeout-minutes: 5
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
              with:
                  scanMetadataReportFile: .scannerwork/report-task.txt

    build-backend:
        runs-on: ubuntu-latest
        needs: [sonarqube-analysis]
        steps:
            - uses: actions/checkout@v2

            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: '17'

            - name: Install dependencies for backend
              working-directory: ./backend
              run: npm install

            - name: Build backend
              working-directory: ./backend
              run: npm run build

    build-frontend:
        runs-on: ubuntu-latest
        needs: [sonarqube-analysis]
        steps:
            - uses: actions/checkout@v2

            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: '17'

            - name: Install dependencies for frontend
              working-directory: ./frontend
              run: npm install

            - name: Build frontend
              working-directory: ./frontend
              run: npm run build

    build-and-push-images:
        needs: [build-backend, build-frontend]
        runs-on: ubuntu-latest
        strategy:
            matrix:
                service: [backend, frontend]
                include:
                    - service: backend
                      image_name: ivladii/todo-backend-dev
                      context: ./backend
                      build_args: 'MODE=${{ vars.MODE }}'
                    - service: frontend
                      image_name: ivladii/todo-frontend-dev
                      context: ./frontend
                      build_args: ''
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Cache Docker layers
              uses: actions/cache@v3
              with:
                  path: /tmp/.buildx-cache
                  key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
                  restore-keys: |
                      ${{ runner.os }}-buildx-${{ matrix.service }}-

            - name: Login to DockerHub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Print environment variable
              if: matrix.service == 'backend'
              run: echo "My variable value is ${{ vars.MODE }}"

            - name: Build and push ${{ matrix.service }} image
              uses: docker/build-push-action@v4
              with:
                  context: ${{ matrix.context }}
                  platforms: linux/amd64
                  push: true
                  build-args: ${{ matrix.build_args }}
                  tags: |
                      ${{ matrix.image_name }}:latest
                      ${{ matrix.image_name }}:${{ github.sha }}

    deploy:
        needs: build-and-push-images
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up kubectl
              uses: azure/setup-kubectl@v3

            - name: Configure kubectl
              run: |
                  echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
                  export KUBECONFIG=./kubeconfig
                  chmod 600 kubeconfig
                  export KUBECONFIG=./kubeconfig
                  kubectl config view
                  kubectl config current-context
                  kubectl cluster-info

            - name: Update deployment manifests
              run: |
                  sed -i "s|ivladii/todo-backend-dev:.*|ivladii/todo-backend-dev:${{ github.sha }}|g" k8s/deployments/*.yml
                  sed -i "s|ivladii/todo-frontend-dev:.*|ivladii/todo-frontend-dev:${{ github.sha }}|g" k8s/deployments/*.yml

            - name: Deploy to Kubernetes
              run: |
                  export KUBECONFIG=./kubeconfig
                  kubectl apply -f k8s/deployments/backend-deployment.yml --validate=false
                  kubectl apply -f k8s/deployments/frontend-deployment.yml --validate=false

            - name: Verify deployment
              run: |
                  export KUBECONFIG=./kubeconfig
                  kubectl rollout status deployment/backend-deploy -n todo-app-deploy
                  kubectl rollout status deployment/frontend-deploy -n todo-app-deploy
