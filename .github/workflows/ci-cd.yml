name: CI/CD Pipeline

on:
    push:
        branches: [main, master]
    pull_request:
        branches: [main, master]
    workflow_dispatch:

jobs:
    test-backend:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '18'

            - name: Install dependencies for backend
              working-directory: ./backend
              run: npm install

            - name: Run tests for backend with coverage
              working-directory: ./backend
              run: npm test -- --coverage

            - name: Upload backend coverage
              uses: actions/upload-artifact@v4
              with:
                  name: backend-coverage
                  path: ./backend/coverage/
                  retention-days: 1

    test-frontend:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '17'

            - name: Install dependencies for frontend
              working-directory: ./frontend
              run: npm install

            - name: Run tests for frontend with coverage
              working-directory: ./frontend
              run: npm run test -- --coverage

            - name: Upload frontend coverage
              uses: actions/upload-artifact@v4
              with:
                  name: frontend-coverage
                  path: ./frontend/coverage/
                  retention-days: 1

    sonarqube-parallel:
        runs-on: ubuntu-latest
        needs: [test-backend, test-frontend]
        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '18'

            - name: Download backend coverage
              uses: actions/download-artifact@v4
              with:
                  name: backend-coverage
                  path: ./backend/coverage/

            - name: Download frontend coverage
              uses: actions/download-artifact@v4
              with:
                  name: frontend-coverage
                  path: ./frontend/coverage/

            - name: List coverage files
              run: |
                  echo "Backend coverage files:"
                  ls -la ./backend/coverage/
                  echo "Frontend coverage files:"
                  ls -la ./frontend/coverage/

            - name: Run SonarQube Analysis and Security Scan in parallel
              run: |
                  # Run both jobs in parallel
                  (
                    # SonarQube Analysis job
                    export SONAR_SCANNER_OPTS="-Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }} \
                    -Dsonar.organization=${{ github.repository_owner }} \
                    -Dsonar.sources=backend/src,frontend/src \
                    -Dsonar.javascript.lcov.reportPaths=./frontend/coverage/lcov.info,./backend/coverage/lcov.info \
                    -Dsonar.coverage.exclusions=**/node_modules/**,**/tests/**,**/*.test.js,**/*.spec.js \
                    -Dsonar.qualitygate.wait=true \
                    -Dsonar.qualitygate.timeout=300 \
                    -Dsonar.qualitygate.conditions=coverage>80"

                    sonar-scanner > sonarqube-analysis.log 2>&1
                  ) &

                  (
                    # SonarQube Security Scan job
                    export SONAR_SCANNER_OPTS="-Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}_security \
                    -Dsonar.organization=${{ github.repository_owner }} \
                    -Dsonar.sources=backend/src,frontend/src \
                    -Dsonar.javascript.lcov.reportPaths=./frontend/coverage/lcov.info,./backend/coverage/lcov.info \
                    -Dsonar.coverage.exclusions=**/node_modules/**,**/tests/**,**/*.test.js,**/*.spec.js,**/*.test.ts,**/*.spec.ts \
                    -Dsonar.exclusions=**/*.test.js,**/*.spec.js,**/*.test.ts,**/*.test.tsx,**/*.test.jsx,**/*.spec.ts,**/tests/**,**/test/**,**/__tests__/** \
                    -Dsonar.qualitygate.wait=true \
                    -Dsonar.qualitygate.timeout=300 \
                    -Dsonar.qualitygate.conditions=coverage>80 \
                    -Dsonar.security.enabled=true \
                    -Dsonar.security.vulnerabilityProbability.critical=BLOCKER \
                    -Dsonar.security.vulnerabilityProbability.high=CRITICAL \
                    -Dsonar.security.vulnerabilityProbability.medium=MAJOR \
                    -Dsonar.security.vulnerabilityProbability.low=MINOR"

                    sonar-scanner > sonarqube-security.log 2>&1
                  ) &

                  # Wait for both jobs to complete
                  wait

                  # Check results
                  echo "SonarQube Analysis Results:"
                  cat sonarqube-analysis.log

                  echo "SonarQube Security Scan Results:"
                  cat sonarqube-security.log
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    build-backend:
        runs-on: ubuntu-latest
        needs: [sonarqube-parallel]
        steps:
            - uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '17'

            - name: Install dependencies for backend
              working-directory: ./backend
              run: npm install

            - name: Build backend
              working-directory: ./backend
              run: npm run build

            - name: Upload backend build
              uses: actions/upload-artifact@v4
              with:
                  name: backend-build
                  path: ./backend/dist/
                  retention-days: 1

    build-frontend:
        runs-on: ubuntu-latest
        needs: [sonarqube-parallel]
        steps:
            - uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '17'

            - name: Install dependencies for frontend
              working-directory: ./frontend
              run: npm install

            - name: Build frontend
              working-directory: ./frontend
              run: npm run build

            - name: Upload frontend build
              uses: actions/upload-artifact@v4
              with:
                  name: frontend-build
                  path: ./frontend/dist/
                  retention-days: 1

    build-and-push-images:
        needs: [build-backend, build-frontend]
        runs-on: ubuntu-latest
        strategy:
            matrix:
                service: [backend, frontend]
                include:
                    - service: backend
                      image_name: ivladii/todo-backend-dev
                      context: ./backend
                      build_args: 'MODE=${{ vars.MODE }}'
                    - service: frontend
                      image_name: ivladii/todo-frontend-dev
                      context: ./frontend
                      build_args: ''
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Download backend build
              if: matrix.service == 'backend'
              uses: actions/download-artifact@v4
              with:
                  name: backend-build
                  path: ./backend/dist/

            - name: Download frontend build
              if: matrix.service == 'frontend'
              uses: actions/download-artifact@v4
              with:
                  name: frontend-build
                  path: ./frontend/dist/

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Cache Docker layers
              uses: actions/cache@v3
              with:
                  path: /tmp/.buildx-cache
                  key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
                  restore-keys: |
                      ${{ runner.os }}-buildx-${{ matrix.service }}-

            - name: Login to DockerHub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Print environment variable
              if: matrix.service == 'backend'
              run: echo "My variable value is ${{ vars.MODE }}"

            - name: Build and push ${{ matrix.service }} image
              uses: docker/build-push-action@v4
              with:
                  context: ${{ matrix.context }}
                  platforms: linux/amd64
                  push: true
                  build-args: ${{ matrix.build_args }}
                  tags: |
                      ${{ matrix.image_name }}:latest
                      ${{ matrix.image_name }}:${{ github.sha }}

    deploy:
        needs: build-and-push-images
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up kubectl
              uses: azure/setup-kubectl@v3

            - name: Configure kubectl
              run: |
                  echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
                  export KUBECONFIG=./kubeconfig
                  chmod 600 kubeconfig
                  export KUBECONFIG=./kubeconfig
                  kubectl config view
                  kubectl config current-context
                  kubectl cluster-info

            - name: Update deployment manifests
              run: |
                  sed -i "s|ivladii/todo-backend-dev:.*|ivladii/todo-backend-dev:${{ github.sha }}|g" k8s/deployments/*.yml
                  sed -i "s|ivladii/todo-frontend-dev:.*|ivladii/todo-frontend-dev:${{ github.sha }}|g" k8s/deployments/*.yml

            - name: Deploy to Kubernetes
              run: |
                  export KUBECONFIG=./kubeconfig
                  kubectl apply -f k8s/deployments/backend-deployment.yml --validate=false
                  kubectl apply -f k8s/deployments/frontend-deployment.yml --validate=false

            - name: Verify deployment
              run: |
                  export KUBECONFIG=./kubeconfig
                  kubectl rollout status deployment/backend-deploy -n todo-app-deploy
                  kubectl rollout status deployment/frontend-deploy -n todo-app-deploy
    notify:
        runs-on: ubuntu-latest
        needs:
            - test-backend
            - test-frontend
            - sonarqube-parallel
            - build-backend
            - build-frontend
            - build-and-push-images
            - deploy
        if: always()
        steps:
            - name: Prepare notification
              id: prepare
              run: |
                  # Получаем статусы всех jobs
                  TEST_BACKEND="${{ needs.test-backend.result }}"
                  TEST_FRONTEND="${{ needs.test-frontend.result }}"
                  SONARQUBE="${{ needs.sonarqube-parallel.result }}"
                  BUILD_BACKEND="${{ needs.build-backend.result }}"
                  BUILD_FRONTEND="${{ needs.build-frontend.result }}"
                  BUILD_PUSH_IMAGES="${{ needs.build-and-push-images.result }}"
                  DEPLOY="${{ needs.deploy.result }}"

                  # Формируем emoji для статусов
                  function get_emoji() {
                    if [[ "$1" == "success" ]]; then
                      echo "✅"
                    elif [[ "$1" == "skipped" ]]; then
                      echo "⏭️"
                    elif [[ "$1" == "cancelled" ]]; then
                      echo "🚫"
                    else
                      echo "❌"
                    fi
                  }

                  # Проверяем общий статус
                  if [[ "$TEST_BACKEND" == "success" && \
                        "$TEST_FRONTEND" == "success" && \
                        "$SONARQUBE" == "success" && \
                        "$BUILD_BACKEND" == "success" && \
                        "$BUILD_FRONTEND" == "success" && \
                        "$BUILD_PUSH_IMAGES" == "success" && \
                        "$DEPLOY" == "success" ]]; then
                    echo "status=<b>✅ Все этапы CI/CD успешно завершены!</b>" >> $GITHUB_OUTPUT
                    echo "success=true" >> $GITHUB_OUTPUT
                  else
                    echo "status=<b>❌ CI/CD завершился с ошибками!</b>" >> $GITHUB_OUTPUT
                    echo "success=false" >> $GITHUB_OUTPUT
                  fi

                  # Формируем HTML-таблицу с результатами
                  TEST_BACKEND_EMOJI=$(get_emoji "$TEST_BACKEND")
                  TEST_FRONTEND_EMOJI=$(get_emoji "$TEST_FRONTEND")
                  SONARQUBE_EMOJI=$(get_emoji "$SONARQUBE")
                  BUILD_BACKEND_EMOJI=$(get_emoji "$BUILD_BACKEND")
                  BUILD_FRONTEND_EMOJI=$(get_emoji "$BUILD_FRONTEND")
                  BUILD_PUSH_IMAGES_EMOJI=$(get_emoji "$BUILD_PUSH_IMAGES")
                  DEPLOY_EMOJI=$(get_emoji "$DEPLOY")

                  echo "details<<EOF" >> $GITHUB_OUTPUT
                  echo "<pre>" >> $GITHUB_OUTPUT
                  echo "$TEST_BACKEND_EMOJI Тестирование бэкенда: $TEST_BACKEND" >> $GITHUB_OUTPUT
                  echo "$TEST_FRONTEND_EMOJI Тестирование фронтенда: $TEST_FRONTEND" >> $GITHUB_OUTPUT
                  echo "$SONARQUBE_EMOJI Анализ SonarQube: $SONARQUBE" >> $GITHUB_OUTPUT
                  echo "$BUILD_BACKEND_EMOJI Сборка бэкенда: $BUILD_BACKEND" >> $GITHUB_OUTPUT
                  echo "$BUILD_FRONTEND_EMOJI Сборка фронтенда: $BUILD_FRONTEND" >> $GITHUB_OUTPUT
                  echo "$BUILD_PUSH_IMAGES_EMOJI Сборка и публикация образов: $BUILD_PUSH_IMAGES" >> $GITHUB_OUTPUT
                  echo "$DEPLOY_EMOJI Деплой: $DEPLOY" >> $GITHUB_OUTPUT
                  echo "</pre>" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

            - name: Send Telegram notification
              uses: appleboy/telegram-action@master
              with:
                  to: ${{ secrets.TELEGRAM_TO }}
                  token: ${{ secrets.TELEGRAM_TOKEN }}
                  format: html
                  message: |
                      ${{ steps.prepare.outputs.status }}

                      <b>Детали:</b>
                      ${{ steps.prepare.outputs.details }}

                      <b>Репозиторий:</b> <code>${{ github.repository }}</code>
                      <b>Ветка:</b> <code>${{ github.ref_name }}</code>
                      <b>Коммит:</b> <code>${{ github.event.head_commit.message }}</code>
                      <b>Автор:</b> <a href="https://github.com/${{ github.actor }}">${{ github.actor }}</a>

                      ${{ steps.prepare.outputs.success == 'false' && '<a href="https://github.com/' || '' }}${{ steps.prepare.outputs.success == 'false' && github.repository || '' }}${{ steps.prepare.outputs.success == 'false' && '/actions/runs/' || '' }}${{ steps.prepare.outputs.success == 'false' && github.run_id || '' }}${{ steps.prepare.outputs.success == 'false' && '">Подробности</a>' || '' }}
